service: celsus-synchronize

plugins:
  - serverless-python-requirements # For python dependencies packaging
  - serverless-domain-manager

custom:
  config: ${file(./infra.json)}
  pythonRequirements: # For python dependencies packaging
    dockerizePip: true
    slim: true
  customDomain:
    domainName: "api-celsus.isnan.eu"
    certificateName: ${self:custom.config.certificate}
    hostedZoneId: ${self:custom.config.hostedZone}
    basePath: "synchronization"
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: edge

provider:
  name: aws
  runtime: python3.7
  versionFunctions: false
  memorySize: 1024
  region: ${self:custom.config.region}
  stage: ${self:custom.config.environment}
  endpointType: EDGE
  profile: serverless-admin-profile
  # >>> Enable Gzip compression on AWS APi Gateway
  apiGateway:
    minimumCompressionSize: 1024 # in bytes
  # <<< Enable Gzip compression on AWS APi Gateway
  # >>> Lambda has to live in VPC in order to access RDS
  role: ${self:custom.config.lambdaExecutionRoleArn}
  vpc:
    securityGroupIds:
      - ${self:custom.config.coreStorageSecurityGroup} # To access the RDS instance
    subnetIds:
      - ${self:custom.config.mainVPCSubnet2}
  # <<< Lambda has to live in VPC in order to access RDS

  environment:
    PGUSER: ${ssm:core_storage_username_${self:provider.stage}~true}
    PGPASSWORD: ${ssm:core_storage_password_${self:provider.stage}~true}
    PGHOST: ${ssm:core_storage_hostname_${self:provider.stage}~true}
    PGPORT: ${ssm:core_storage_port_${self:provider.stage}~true}
    PGDATABASE: ${ssm:core_storage_database_${self:provider.stage}~true}
    PGSCHEMA: ${ssm:core_storage_schema_${self:provider.stage}~true}
    REGION: ${self:custom.config.region}
    LOG_LEVEL: info

package:
  exclude:
    - .vscode/**
    - .travis.yml
    - package.json
    - package-lock.json
    - node_modules/**
    - tests/**
    - conftest.py
    - pytest.ini

functions:
  beginSynchronize:
    handler: synchronizer/handler.begin_synchronize
    name: begin-synchronize
    events:
      - http:
          path: v1/synchronize
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.config.userPoolArn}
  synchronize:
    handler: synchronizer/handler.synchronize
    name: synchronize
    events:
      - http:
          path: v1/synchronize/{session}
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.config.userPoolArn}
  endSynchronize:
    handler: synchronizer/handler.end_synchronize
    name: end-synchronize
    events:
      - http:
          path: v1/synchronize/{session}
          method: delete
          cors: true
          authorizer:
            arn: ${self:custom.config.userPoolArn}
  cleanUp:
    handler: synchronizer/handler.cleanup
    name: cleanup-synchronize
    events:
      - schedule: rate(7 days)
